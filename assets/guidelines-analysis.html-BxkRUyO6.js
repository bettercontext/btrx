import{_ as l,c as d,a as i,d as t,b as n,e as s,w as c,r as a,o as h}from"./app-DUUhoVTU.js";const p={};function g(u,e){const o=a("Mermaid"),r=a("RouteLink");return h(),d("div",null,[e[3]||(e[3]=i(`<h1 id="guidelines-analysis-workflow" tabindex="-1"><a class="header-anchor" href="#guidelines-analysis-workflow"><span>Guidelines Analysis Workflow</span></a></h1><p>The guidelines analysis workflow is the core feature of Better Context, enabling AI assistants to analyze repository code and generate contextual development guidelines.</p><p>It combines repository analysis, AI processing, and structured guidelines generation to create actionable development documentation tailored to specific contexts like testing, architecture, or documentation standards.</p><h2 id="run-the-analysis" tabindex="-1"><a class="header-anchor" href="#run-the-analysis"><span>Run the Analysis</span></a></h2><p>Make sure you have at least one context set up for the current project and Better Context is running. Prompt the following:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">Using better context MCP, run the tool guidelines_analysis to initiate the coding guidelines analysis workflow for this project.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div></div><h2 id="workflow-architecture" tabindex="-1"><a class="header-anchor" href="#workflow-architecture"><span>Workflow Architecture</span></a></h2>`,7)),t(o,{id:"mermaid-19",code:"eJyNlMtu2zAQRff9illlZ3TfRQtFdhwnduJEsvMQgoKVxg4BmhRIKo/a/fcOh7RsFAlQr2jocB73XmltRfsM5fAL0C+rFg7t12wCEy29FB4dZFqodyfdEwwG3+G0muVzKI1R32DdyQaV1Oh+igTBq/TPpvNQG+3xzU8a98SVT/l2Xt1ia5z0xr7DED3WXhoNJ7AUSjYi/Il4zviwmhrRQKYU5LGeg5WxcCgS6SHTo20PnZlONz/+8MNReLi7Mjs4o+6+sxq02ZMMQmvNpvWxVsQf0O1gXI1RoyUVoMRNq+jQwJxZ3nM/FEylS7fHPMk5ywgFKlrQHWb3Jqr5GyN9zvSkIr1roZT7VNEjOUFYK2hvLjDhAhcVDVWjo72ldb4fa0WjQhbxQF8wfblXIWGDosVarmTdO03mO2879ibZd8lXp2HSohY6dFKUjZP9Pg7mwnu0e37K/Czwew0djPvtIjRj6OrjRDnxklS6Yux6e7hOibAomncYvZHy5DNz173R86qgcOBRQxhKS16opERE2eSbKqdaZPEcdSP1GpZoXZ/DG+59W93hL1KFFlyJGqF4Nq+h5GoVqVumii27nrFuMXsF90nhxh2UIf8qlMg7a1GnHKXWsVi8kwtdo9rBgm5szMsH4zE8587L7Sys2+dM6mh7egPKCPF5kc78Z3mQ4e44FVJ31PAo6DSDkDq0//e9vuN69/8RYftpjfuY4uOZgosPVR/InEZR9LlIWz9W52U5h8KTc5tQcfRCWqYvVJbRKkINvNzwEmsb3oxFGxxIDePX5fEoqfEc1Yzn6Pzjl7+4bpye"}),e[4]||(e[4]=i('<h2 id="workflow-steps" tabindex="-1"><a class="header-anchor" href="#workflow-steps"><span>Workflow Steps</span></a></h2><h3 id="_1-analysis-initiation" tabindex="-1"><a class="header-anchor" href="#_1-analysis-initiation"><span>1. Analysis Initiation</span></a></h3><p>The workflow begins when an AI assistant calls the <code>guidelines_analysis</code> MCP tool without a contextId:</p><ul><li><strong>Repository Detection</strong>: Identifies the current repository using Git origin URL or working directory path</li><li><strong>Context Loading</strong>: Retrieves all defined guidelines contexts for the repository</li><li><strong>Queue Creation</strong>: Creates a processing queue with all contexts that need analysis</li><li><strong>Initial Prompt</strong>: Returns a structured prompt instructing the AI to begin with the first context</li></ul><h3 id="_2-context-processing-loop" tabindex="-1"><a class="header-anchor" href="#_2-context-processing-loop"><span>2. Context Processing Loop</span></a></h3><p>The workflow processes each context sequentially through a loop mechanism:</p><h4 id="per-context-steps" tabindex="-1"><a class="header-anchor" href="#per-context-steps"><span>Per-Context Steps:</span></a></h4><ol><li><p><strong>Context Analysis Setup</strong></p><ul><li>AI calls <code>guidelines_analysis</code> with the current context ID</li><li>Tool returns context-specific analysis instructions and file patterns</li></ul></li><li><p><strong>Repository Analysis</strong></p><ul><li>AI scans relevant files based on context configuration</li><li>Analyzes code patterns, structures, and conventions</li><li>Identifies context-specific guidelines opportunities</li></ul></li><li><p><strong>Guidelines Generation</strong></p><ul><li>AI generates actionable guidelines as an array of strings</li><li>Guidelines are tailored to the specific context (testing, architecture, etc.)</li></ul></li><li><p><strong>Guidelines Storage</strong></p><ul><li>AI calls <code>guidelines_save</code> with generated guidelines and context ID</li><li>System checks if guidelines already exist for this context</li><li><strong>New Guidelines</strong>: Stored directly in the database</li><li><strong>Existing Guidelines</strong>: Creates a pending version for review</li></ul></li></ol><h4 id="loop-continuation" tabindex="-1"><a class="header-anchor" href="#loop-continuation"><span>Loop Continuation:</span></a></h4><ul><li><strong>Context Queue Check</strong>: System determines if more contexts remain unprocessed</li><li><strong>Continue Prompt</strong>: If contexts remain, generates a continuation prompt for the next context</li><li><strong>Loop Iteration</strong>: Process repeats from step 1 with the next context</li><li><strong>Completion</strong>: When all contexts are processed, the analysis workflow completes</li></ul><h3 id="_3-real-time-updates" tabindex="-1"><a class="header-anchor" href="#_3-real-time-updates"><span>3. Real-time Updates</span></a></h3><p>Throughout the loop process:</p><ul><li><strong>HTTP Streaming Events</strong>: HTTP streaming provides real-time progress updates</li><li><strong>Web Interface</strong>: Updates reflect current analysis status and completed contexts</li><li><strong>Progress Tracking</strong>: Users can monitor which contexts have been processed</li></ul><h3 id="_4-analysis-completion" tabindex="-1"><a class="header-anchor" href="#_4-analysis-completion"><span>4. Analysis Completion</span></a></h3><p>Once all contexts have been processed:</p><ul><li><strong>Final Update</strong>: Web interface shows all generated guidelines</li><li><strong>Database Consistency</strong>: All guidelines are properly stored and associated</li><li><strong>Ready for Use</strong>: Guidelines are immediately available for AI assistants and developers</li></ul><h2 id="key-features" tabindex="-1"><a class="header-anchor" href="#key-features"><span>Key Features</span></a></h2><h3 id="sequential-processing" tabindex="-1"><a class="header-anchor" href="#sequential-processing"><span>Sequential Processing</span></a></h3><p>The loop-based architecture ensures:</p><ul><li><strong>Focused Analysis</strong>: Each context receives dedicated attention</li><li><strong>Resource Management</strong>: Processing happens one context at a time</li><li><strong>Error Isolation</strong>: Issues with one context don&#39;t affect others</li></ul><h3 id="prompt-driven-workflow" tabindex="-1"><a class="header-anchor" href="#prompt-driven-workflow"><span>Prompt-Driven Workflow</span></a></h3><p>The system uses intelligent prompting with templating:</p><ul><li><strong>Dynamic Instructions</strong>: Each prompt is tailored to the current context and remaining queue using template variables</li><li><strong>Template Engine</strong>: Supports variable substitution (<code>{{variable}}</code>) and array iteration (<code>{{#each array}}</code>) for dynamic content generation</li><li><strong>Self-Managing</strong>: AI assistants follow structured instructions to complete the entire workflow</li><li><strong>Flexible Continuation</strong>: Supports interruption and resumption of analysis</li></ul><h3 id="context-aware-guidelines" tabindex="-1"><a class="header-anchor" href="#context-aware-guidelines"><span>Context-Aware Guidelines</span></a></h3><p>Each context produces specialized guidelines.</p><h2 id="guidelines-versioning-and-diff-management" tabindex="-1"><a class="header-anchor" href="#guidelines-versioning-and-diff-management"><span>Guidelines Versioning and Diff Management</span></a></h2><p>When generating new guidelines for a context that already has existing guidelines, Better Context implements a versioning system to prevent accidental overwrites and provide visibility into changes.</p><h3 id="automatic-version-detection" tabindex="-1"><a class="header-anchor" href="#automatic-version-detection"><span>Automatic Version Detection</span></a></h3><p>The system automatically detects when guidelines already exist for a context:</p><ul><li><strong>First-time Generation</strong>: Guidelines are stored directly without versioning</li><li><strong>Subsequent Generations</strong>: Creates a &quot;pending version&quot; alongside the current guidelines</li><li><strong>Protection</strong>: Prevents immediate overwrite of existing work</li></ul><h3 id="diff-visualization" tabindex="-1"><a class="header-anchor" href="#diff-visualization"><span>Diff Visualization</span></a></h3><p>When pending versions are created, the web interface provides a comprehensive diff view:</p><ul><li><strong>Side-by-side Comparison</strong>: Current guidelines vs. pending changes</li><li><strong>Line-by-line Analysis</strong>: Visual indicators for added, removed, and unchanged content</li><li><strong>Context Information</strong>: Clear labeling of which context has pending changes</li></ul><h3 id="user-actions" tabindex="-1"><a class="header-anchor" href="#user-actions"><span>User Actions</span></a></h3><p>For each pending version, users can take one of two actions:</p><h4 id="validate-changes" tabindex="-1"><a class="header-anchor" href="#validate-changes"><span>Validate Changes</span></a></h4><ul><li><strong>Action</strong>: Replaces current guidelines with the pending version</li><li><strong>Effect</strong>: Pending version becomes the new current guidelines</li><li><strong>Use Case</strong>: When the new analysis provides better or updated guidelines</li></ul><h4 id="cancel-changes" tabindex="-1"><a class="header-anchor" href="#cancel-changes"><span>Cancel Changes</span></a></h4><ul><li><strong>Action</strong>: Discards the pending version</li><li><strong>Effect</strong>: Current guidelines remain unchanged</li><li><strong>Use Case</strong>: When current guidelines are preferred or new analysis is incorrect</li></ul><h3 id="workflow-considerations" tabindex="-1"><a class="header-anchor" href="#workflow-considerations"><span>Workflow Considerations</span></a></h3><h4 id="multiple-contexts" tabindex="-1"><a class="header-anchor" href="#multiple-contexts"><span>Multiple Contexts</span></a></h4><ul><li>Each context manages its own versions independently</li><li>Partial validation is supported (validate some contexts, cancel others)</li><li>Analysis can continue with remaining contexts after resolving diffs</li></ul><h4 id="error-prevention" tabindex="-1"><a class="header-anchor" href="#error-prevention"><span>Error Prevention</span></a></h4><ul><li>System blocks new analysis attempts when unresolved diffs exist</li><li>Clear error messages guide users to resolve pending changes first</li><li>Ensures data consistency and prevents confusion</li></ul><h4 id="web-interface-integration" tabindex="-1"><a class="header-anchor" href="#web-interface-integration"><span>Web Interface Integration</span></a></h4><ul><li>Visual indicators for contexts with pending changes</li><li>Streamlined workflow for reviewing and managing multiple diffs</li></ul><h3 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h3><ol><li><strong>Review Before Validating</strong>: Always examine the diff to understand what&#39;s changing</li><li><strong>Context-Specific Decisions</strong>: Each context may warrant different actions based on analysis quality</li><li><strong>Incremental Updates</strong>: Consider validating high-quality changes and canceling questionable ones</li><li><strong>Regular Maintenance</strong>: Address pending diffs promptly to keep the workflow smooth</li></ol><h2 id="need-help" tabindex="-1"><a class="header-anchor" href="#need-help"><span>Need Help?</span></a></h2>',49)),n("ul",null,[n("li",null,[e[1]||(e[1]=s("Check the ")),t(r,{to:"/user-guide/troubleshooting.html"},{default:c(()=>e[0]||(e[0]=[s("troubleshooting guide")])),_:1,__:[0]})]),e[2]||(e[2]=n("li",null,"Report issues on GitHub",-1))])])}const m=l(p,[["render",g]]),x=JSON.parse('{"path":"/user-guide/guidelines-analysis.html","title":"Guidelines Analysis Workflow","lang":"en-US","frontmatter":{},"git":{"updatedTime":1749768386000,"contributors":[{"name":"edbrdi","username":"edbrdi","email":"edbrdi@pm.me","commits":4,"url":"https://github.com/edbrdi"}],"changelog":[{"hash":"92571144785ebaee307eb6246b275b044b694a41","time":1749768386000,"email":"edbrdi@pm.me","author":"edbrdi","message":"feat: add diff functionality"},{"hash":"597b7c8124a9422bdc2d440ebc02d3cd5f44b842","time":1749290338000,"email":"edbrdi@pm.me","author":"edbrdi","message":"feat: migrate from SSE to HTTP streamable transport"},{"hash":"c2d61f4ddbb0873a75ee0f6164277a7a746ae05b","time":1748794567000,"email":"edbrdi@pm.me","author":"edbrdi","message":"refactor: prepare guidelines (service/MCP) for the diff feature"},{"hash":"d9cf13c5ae31533abdd923041acff4cbc24b9068","time":1748540045000,"email":"edbrdi@pm.me","author":"edbrdi","message":"docs: setup vuepress &#x26; add initial documentation"}]},"filePathRelative":"user-guide/guidelines-analysis.md"}');export{m as comp,x as data};
