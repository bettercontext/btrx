import{_ as o,c as r,a as l,b as t,d as a,w as s,e as n,r as d,o as c}from"./app-CK0euZ0p.js";const u={};function p(g,e){const i=d("RouteLink");return c(),r("div",null,[e[4]||(e[4]=l('<h1 id="contexts-and-guidelines" tabindex="-1"><a class="header-anchor" href="#contexts-and-guidelines"><span>Contexts and Guidelines</span></a></h1><h2 id="understanding-contexts-vs-guidelines" tabindex="-1"><a class="header-anchor" href="#understanding-contexts-vs-guidelines"><span>Understanding Contexts vs Guidelines</span></a></h2><p><strong>Better Context</strong> utilizes a two-stage approach to generate coding guidelines:</p><h3 id="contexts" tabindex="-1"><a class="header-anchor" href="#contexts"><span>Contexts</span></a></h3><p><strong>Contexts</strong> define <em>how</em> to analyze your codebase. They are specialized prompts that tell the AI what to look for when examining your code. Think of them as &quot;analysis instructions&quot; that focus on specific aspects of your project.</p><h3 id="guidelines" tabindex="-1"><a class="header-anchor" href="#guidelines"><span>Guidelines</span></a></h3><p><strong>Guidelines</strong> are the <em>result</em> of applying a context to your codebase. They contain the actual coding rules, patterns, and best practices extracted from your code by the AI analysis.</p><p><strong>Key relationship</strong>: Context → AI Analysis → Guidelines</p><h2 id="why-contexts-are-essential" tabindex="-1"><a class="header-anchor" href="#why-contexts-are-essential"><span>Why Contexts Are Essential</span></a></h2><p>You <strong>must</strong> create at least one context before you can generate any guidelines. Without a context, Better Context doesn&#39;t know how to analyze your code or what patterns to extract.</p><h2 id="available-presets" tabindex="-1"><a class="header-anchor" href="#available-presets"><span>Available Presets</span></a></h2><p>Better Context includes two built-in presets to get you started quickly:</p><h3 id="frontend-preset" tabindex="-1"><a class="header-anchor" href="#frontend-preset"><span>Frontend Preset</span></a></h3><p>The <strong>Front</strong> preset analyzes your frontend codebase and focuses on:</p><p><strong>Code Analysis:</strong></p><ul><li>Component structure and composition (file organization, folder hierarchy, atomic design principles)</li><li>State management (local vs. global, libraries used, separation of concerns)</li><li>Props and data flow (typing, destructuring, default values, immutability)</li><li>UI consistency (reusable components, design tokens, layout strategies, theming)</li></ul><p><strong>Testing Analysis:</strong></p><ul><li>Test structure and file placement</li><li>Naming and grouping of tests (describe blocks, titles, hierarchy)</li><li>Assertion patterns and style</li><li>Mocking/stubbing strategies (services, APIs, local storage)</li><li>Test clarity and expressiveness</li><li>Usage of testing libraries and setup utilities</li></ul><h3 id="backend-preset" tabindex="-1"><a class="header-anchor" href="#backend-preset"><span>Backend Preset</span></a></h3><p>The <strong>Back</strong> preset analyzes your backend codebase and focuses on:</p><p><strong>Code Analysis:</strong></p><ul><li>API endpoint design (structure, naming, HTTP methods, versioning)</li><li>Data validation (schemas, libraries used, placement of validation logic)</li><li>Error handling (types, granularity, HTTP codes, logging strategy)</li><li>Database interaction (ORM/queries, abstraction layers, transactions)</li><li>Service layer structure (modularity, naming, dependency management)</li></ul><p><strong>Testing Analysis:</strong></p><ul><li>Test organization and naming conventions</li><li>Setup and teardown procedures (fixtures, lifecycle hooks, DB state)</li><li>Assertion style and clarity</li><li>Mocking/stubbing of external services and databases</li><li>Code coverage strategies, test isolation, and execution speed optimizations</li></ul><h2 id="managing-contexts" tabindex="-1"><a class="header-anchor" href="#managing-contexts"><span>Managing Contexts</span></a></h2><h3 id="accessing-context-management" tabindex="-1"><a class="header-anchor" href="#accessing-context-management"><span>Accessing Context Management</span></a></h3><ol><li>Navigate to the <strong>Guidelines</strong> page in Better Context</li><li>Click the <strong>&quot;Manage Contexts&quot;</strong> button in the top right corner</li><li>The context management dialog will open</li></ol><h3 id="adding-your-first-context" tabindex="-1"><a class="header-anchor" href="#adding-your-first-context"><span>Adding Your First Context</span></a></h3><p>Since at least one context is required, here&#39;s how to create one:</p><h4 id="using-a-preset-recommended" tabindex="-1"><a class="header-anchor" href="#using-a-preset-recommended"><span>Using a Preset (Recommended)</span></a></h4><ol><li>In the context management dialog, click <strong>&quot;New Context&quot;</strong></li><li>Enter a descriptive name (e.g., &quot;Frontend Analysis&quot;, &quot;API Guidelines&quot;)</li><li>Click <strong>&quot;Load Preset&quot;</strong> and choose either: <ul><li><strong>Front</strong> - for frontend/UI code analysis</li><li><strong>Back</strong> - for backend/API code analysis</li></ul></li><li>Review the loaded prompt and modify if needed</li><li>Click <strong>&quot;Save&quot;</strong></li></ol><h4 id="creating-a-custom-context" tabindex="-1"><a class="header-anchor" href="#creating-a-custom-context"><span>Creating a Custom Context</span></a></h4><ol><li>In the context management dialog, click <strong>&quot;New Context&quot;</strong></li><li>Enter a descriptive name</li><li>Write your own analysis prompt that describes: <ul><li>What aspects of the code to examine</li><li>What patterns to look for</li><li>What type of guidelines to extract</li></ul></li><li>Click <strong>&quot;Save&quot;</strong></li></ol><h3 id="context-best-practices" tabindex="-1"><a class="header-anchor" href="#context-best-practices"><span>Context Best Practices</span></a></h3><p><strong>Naming Conventions:</strong></p><ul><li>Use descriptive names that indicate the analysis focus</li><li>Examples: &quot;React Components&quot;, &quot;API Endpoints&quot;, &quot;Database Layer&quot;, &quot;Testing Strategy&quot;</li></ul><p><strong>Prompt Writing Tips:</strong></p><ul><li>Be specific about what patterns to look for</li><li>Include both positive patterns (what to do) and anti-patterns (what to avoid)</li><li>Focus on one area at a time for better results</li><li>Use action words: &quot;Analyze&quot;, &quot;Identify&quot;, &quot;Extract&quot;, &quot;Focus on&quot;</li></ul><p><strong>Multiple Contexts Strategy:</strong></p><ul><li>Create separate contexts for different code areas (frontend, backend, testing)</li><li>Use specialized contexts for specific frameworks or libraries</li><li>Consider contexts for different aspects (performance, security, maintainability)</li></ul><h3 id="modifying-contexts" tabindex="-1"><a class="header-anchor" href="#modifying-contexts"><span>Modifying Contexts</span></a></h3><ol><li>Open the context management dialog</li><li>Click the <strong>edit icon</strong> next to the context you want to modify</li><li>Update the name or prompt as needed</li><li>Click <strong>&quot;Save&quot;</strong></li></ol><p><strong>Note:</strong> Modifying a context will affect future guideline generations but won&#39;t change existing guidelines.</p><h3 id="deleting-contexts" tabindex="-1"><a class="header-anchor" href="#deleting-contexts"><span>Deleting Contexts</span></a></h3><ol><li>Open the context management dialog</li><li>Click the <strong>delete icon</strong> next to the context</li><li>Confirm the deletion</li></ol><p><strong>Warning:</strong> Deleting a context will also delete all associated guidelines permanently.</p><h2 id="working-with-multiple-contexts" tabindex="-1"><a class="header-anchor" href="#working-with-multiple-contexts"><span>Working with Multiple Contexts</span></a></h2><h3 id="context-tabs" tabindex="-1"><a class="header-anchor" href="#context-tabs"><span>Context Tabs</span></a></h3><p>Once you have multiple contexts, they appear as tabs in the Guidelines view:</p><ul><li>Each tab represents a different context</li><li>Click between tabs to view guidelines from different analyses</li><li>The tab name matches your context name</li></ul><h3 id="repository-specific-contexts" tabindex="-1"><a class="header-anchor" href="#repository-specific-contexts"><span>Repository-Specific Contexts</span></a></h3><p>Contexts are tied to specific repositories:</p><ul><li>Each repository has its own set of contexts</li><li>Context names must be unique within a repository</li><li>You can have the same context name in different repositories</li></ul><h2 id="context-workflow-example" tabindex="-1"><a class="header-anchor" href="#context-workflow-example"><span>Context Workflow Example</span></a></h2><p>Here&#39;s a typical workflow for setting up contexts:</p><ol><li><p><strong>Start with Frontend Analysis</strong></p><ul><li>Create a context named &quot;Frontend&quot;</li><li>Use the &quot;Front&quot; preset</li><li>Generate guidelines to establish UI patterns</li></ul></li><li><p><strong>Add Backend Analysis</strong></p><ul><li>Create a context named &quot;Backend&quot;</li><li>Use the &quot;Back&quot; preset</li><li>Generate guidelines for API and data patterns</li></ul></li><li><p><strong>Specialize Further</strong> (Optional)</p><ul><li>Create &quot;Testing Strategy&quot; context for test-specific guidelines</li><li>Create &quot;Performance&quot; context for optimization patterns</li><li>Create framework-specific contexts (e.g., &quot;Vue Components&quot;, &quot;Express APIs&quot;)</li></ul></li></ol><h2 id="next-step" tabindex="-1"><a class="header-anchor" href="#next-step"><span>Next Step</span></a></h2>',57)),t("ul",null,[t("li",null,[a(i,{to:"/user-guide/guidelines-analysis.html"},{default:s(()=>e[0]||(e[0]=[n("Generate coding guidelines")])),_:1,__:[0]})])]),e[5]||(e[5]=t("h2",{id:"need-help",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#need-help"},[t("span",null,"Need Help?")])],-1)),t("ul",null,[t("li",null,[e[2]||(e[2]=n("Check the ")),a(i,{to:"/user-guide/troubleshooting.html"},{default:s(()=>e[1]||(e[1]=[n("troubleshooting guide")])),_:1,__:[1]})]),e[3]||(e[3]=t("li",null,"Report issues on GitHub",-1))])])}const x=o(u,[["render",p]]),m=JSON.parse('{"path":"/user-guide/contexts-and-guidelines.html","title":"Contexts and Guidelines","lang":"en-US","frontmatter":{},"git":{"updatedTime":1748540045000,"contributors":[{"name":"edbrdi","username":"edbrdi","email":"edbrdi@pm.me","commits":1,"url":"https://github.com/edbrdi"}],"changelog":[{"hash":"d9cf13c5ae31533abdd923041acff4cbc24b9068","time":1748540045000,"email":"edbrdi@pm.me","author":"edbrdi","message":"docs: setup vuepress &#x26; add initial documentation"}]},"filePathRelative":"user-guide/contexts-and-guidelines.md"}');export{x as comp,m as data};
