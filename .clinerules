# Context

This project is the **desktop and web application** `Better Context`. It combines:

- A TypeScript-based MCP (Model Context Protocol) server with HTTP streamable transport
- A Vue.js web interface
- A Tauri-based desktop application

The application enables AI-powered guidelines analysis and workflow management, launched via the `Better Context` command from any directory. It provides contextual information (Git details, guidelines) and manages repository-specific configurations.

# Structure

## File Structure

The source code is organized as follows:

- `bin/`
  - `btrx.js`: Executable script for the `Better Context` command
- `src/`
  - `app/`: Vue.js frontend application
    - `components/`: Reusable Vue components (DarkModeToggle, GuidelinesTableWithDiff, etc.)
    - `composables/`: Vue composables for shared logic
      - `guidelines/`: Guidelines-specific composables (useGuidelines, useGuidelinesDiff)
    - `views/`: Page components (Dashboard, Guidelines, Workflows)
    - `router/`: Vue Router configuration
    - `helpers/`: Utility functions
    - `assets/`: Styles and static assets
  - `db/`: Database logic with PGlite and Drizzle
    - `migrations/`: Database migration files
    - `schema.ts`: Drizzle schema definitions
  - `mcp/`: MCP server implementation
    - `server.ts`: MCP server configuration
    - `tools/`: MCP tools definitions
    - `toolHandlers/`: Tool implementation logic
      - `guidelines/`: Guidelines analysis tools
  - `prompts/`: System prompts for AI interactions
    - `guidelines/`: Guidelines-specific prompts
      - `contexts/`: Context-specific analysis prompts (Back.md, Front.md)
      - `beginGuidelinesAnalysis.md`: Initial workflow prompt with context selection
      - `updateGuidelinesAnalysis.md`: Update workflow prompt for existing guidelines
      - `noContextsFound.md`: Fallback when no contexts exist
  - `helpers/`: Utility functions
    - `templateEngine.ts`: Template rendering with variable substitution and loops
    - `promptReader.ts`: Prompt file loading with template processing
  - `routes/`: API endpoints with hierarchical organization
    - `guidelines/`: Guidelines management routes (contexts, guidelines, presets, diff)
    - `mcp/`: MCP-related routes (tools, client status)
    - `repositories/`: Repository routes (git info, repositories)
    - `system/`: System routes (health, info)
  - `services/`: Business logic services
  - `http/`: HTTP streamable transport handling
- `src-tauri/`: Desktop application (Rust)
  - `src/`: Rust application code
  - `capabilities/`: Tauri capabilities configuration
  - Configuration for icons, builds, and platform-specific settings

## MCP Tools

### Guidelines Analysis Tools

- **`guidelines_analysis`**
  - Unified tool for guidelines analysis workflow
  - Without contextIds: initiates discovery phase, returns templated prompt with available contexts
  - With contextIds array: processes first context, returns context-specific analysis instructions
  - Uses template engine for dynamic prompt generation with context data
- **`guidelines_save`**
  - Saves batch of guidelines for a specific context ID
  - When guidelines already exist: creates pending version for diff review
  - When no existing guidelines: saves directly as active version
  - Handles duplicate detection and validation
  - Automatically continues workflow with remaining contexts
  - Returns next steps or completion status

### Template System

Prompts support templating with:

- Variable substitution: `{{variable}}`
- Array iteration: `{{#each array}}...{{/array}}`
- Dynamic content generation based on repository state

Tool responses follow standard MCP schema:
\`\`\`typescript
{
content: [{
type: "text" | "json",
text: string
}]
}
\`\`\`

# Features

## Guidelines System

- Context-based analysis
- Preset management
- Repository-specific configurations
- Real-time updates via HTTP streaming
- Diff and versioning system
  - Pending versions when updating existing guidelines
  - Visual diff interface with added/removed/unchanged indicators
  - Validate or cancel pending changes
  - Prevents accidental overwrites of existing guidelines

## Desktop Integration

- Cross-platform support via Tauri
- Native system integration
- Local file system access
- Custom URL scheme handling

# Resources

## Frontend

- Vue.js with TypeScript
- Vue Router for navigation
- Custom composables for shared logic
- When possible use computed instead of watch
- Dark mode support

## Backend

- Express with HTTP streamable transport
- PGlite with Drizzle ORM
- Tauri for desktop features
- MCP SDK integration

## API Endpoints

- `/api/guidelines`: Guidelines management
- `/api/guidelines-contexts`: Context configuration
- `/api/guidelines-presets`: Preset management
- `/api/guidelines-diff`: Diff management for pending guidelines
  - `/api/guidelines-diff/contexts`: Get contexts with pending versions
  - `/api/guidelines-diff/:contextId`: Get diff data for specific context
  - `/api/guidelines-diff/:contextId/validate`: Validate pending changes
  - `/api/guidelines-diff/:contextId/cancel`: Cancel pending changes
- `/api/repositories`: Repository information
- `/api/git-info`: Git repository details
- `/api/mcp-client-status`: Client state management
- `/api/mcp-tools`: MCP tools list
- `/api/cwd`: Current working directory information
- `/healthz`: Health monitoring

# Development Guidelines

## General

- Install packages via npm, avoid manual package.json edits
- Keep files under 200 lines
- Follow TypeScript/ESLint/Prettier conventions
- Except for @modelcontextprotocol, don't use .js extension for TypeScript imports (no extension at all)
- When you need to move a file, don't recreate it, use a command to move it
- Naming, comments are in English

## Vue Components

- Order: `<script>`, `<template>`, `<style>`
- Use composables for shared logic
- Implement responsive design patterns
- Don't need to import defineProps when you need it

## Desktop App

- Follow Tauri security best practices
- Handle platform-specific differences
- Implement proper error boundaries
- Use appropriate capability permissions

## Testing

- Write tests with Vitest
- Place test files alongside implementation
- Test both success and error cases
- Run full suite with `npm test`

## Comments

- Never explain what code does
- Only comment to explain why when necessary
- Keep comments exceptional and meaningful

## HTTP Transport Implementation

- Manage connections/disconnections properly
- Clean up resources
- Validate HTTP streaming data
- Handle connection errors
- Implement proper backoff strategies
